diff -Naur a/block.c b/block.c
--- a/block.c
+++ b/block.c
@@ -483,8 +483,26 @@
 static struct probe_info* _probe_path(char *path)
 {
 	struct probe_info *pr;
-	char tmppath[64];
-
+//we used ubifs?bug!!!
+	char tmppath[64],result[64];
+	if (path[5] == 'm' && path[6] == 't' && path[7] == 'd' && path[13] >= '1' && path[14] <= '9' )
+	{
+		//list_for_each_entry(pr, &devices, list)
+		//if (!strcasecmp(pr->type, "ubifs"))
+		//		return NULL;
+		snprintf(tmppath, sizeof(tmppath), "/sys/devices/virtual/mtd/mtd%s/name", path + 13);
+		FILE* fp = fopen (tmppath, "r");
+		if (fp)
+		{
+			if (fgets(result, sizeof(result), fp)!= NULL)
+			{
+				if (strstr(result,"data_vol"))
+					return NULL;
+			}
+			fclose(fp);
+		}
+	}
+	
 	/* skip ubi device if ubiblock device is present */
 	if (path[5] == 'u' && path[6] == 'b' && path[7] == 'i' &&
 	    path[8] >= '0' && path[8] <= '9' ) {
@@ -1343,9 +1343,23 @@
 {
 	struct probe_info *pr = NULL;
 	char devpath[32];
-
+	char pathroot[]= "/proc/cmdline";
+	char cmdline[128];
+	char *nameroot = "rootfsA";
+	FILE* fp = fopen (pathroot, "r");
+	if (fp)
+	{
+		if (fgets(cmdline, sizeof(cmdline), fp)!= NULL)
+		{
+			if (strstr(cmdline,"rootfsA"))
+				nameroot = "rootfsA";
+			else
+				nameroot = "rootfsB";
+		}
+		fclose(fp);
+	}
 #ifdef UBIFS_EXTROOT
-	if (find_block_mtd("\"rootfs\"", devpath, sizeof(devpath))) {
+	if (find_block_mtd(nameroot, devpath, sizeof(devpath))) {
 		int err = -1;
 		libubi_t libubi;
 
 		libubi = libubi_open();
-		err = find_block_ubi_RO(libubi, "rootfs", devpath, sizeof(devpath));
+		err = find_block_ubi_RO(libubi, nameroot, devpath, sizeof(devpath));
 		libubi_close(libubi);
 		if (err)
 			return -1;
@@ -1356,7 +1370,7 @@
 			return -1;
 	}
 #else
-	if (find_block_mtd("\"rootfs\"", devpath, sizeof(devpath))) {
+	if (find_block_mtd(nameroot, devpath, sizeof(devpath))) {
 		if (find_root_dev(devpath, sizeof(devpath))) {
 			ULOG_ERR("extroot: unable to determine root device\n");
 			return -1;
@@ -1521,7 +1535,7 @@
 	 */
 
 	/* Start with looking for MTD partition */
-	find_block_mtd("\"rootfs_data\"", blkdev_path, sizeof(blkdev_path));
+	find_block_mtd("\"data_vol\"", blkdev_path, sizeof(blkdev_path));
 	if (blkdev_path[0]) {
 		pr = find_block_info(NULL, NULL, blkdev_path);
 		if (pr && !strcmp(pr->type, "jffs2")) {
@@ -1547,7 +1561,7 @@
 	/* ... but it also could be an UBI volume */
 	memset(blkdev_path, 0, sizeof(blkdev_path));
 	libubi = libubi_open();
-	find_block_ubi(libubi, "rootfs_data", blkdev_path, sizeof(blkdev_path));
+	find_block_ubi(libubi, "data_vol", blkdev_path, sizeof(blkdev_path));
 	libubi_close(libubi);
 	if (blkdev_path[0]) {
 		char cfg[] = "/tmp/ubifs_cfg";
--- a/mount_root.c
+++ b/mount_root.c
@@ -31,7 +31,7 @@
 start(int argc, char *argv[1])
 {
 	struct volume *root;
-	struct volume *data = volume_find("rootfs_data");
+	struct volume *data = volume_find("data_vol");
 	struct stat s;
 
 	if (!getenv("PREINIT") && stat("/tmp/.preinit", &s))
@@ -101,7 +101,7 @@
 static int
 done(int argc, char *argv[1])
 {
-	struct volume *v = volume_find("rootfs_data");
+	struct volume *v = volume_find("data_vol");
 
 	if (!v)
 		return -1;
--- a/jffs2reset.c
+++ b/jffs2reset.c
@@ -119,7 +119,7 @@
 		return -1;
 	}
 
-	v = volume_find("rootfs_data");
+	v = volume_find("data_vol");
 	if (!v) {
 		ULOG_ERR("MTD partition 'rootfs_data' not found\n");
 		return -1;
--- a/libfstools/rootdisk.c
+++ b/libfstools/rootdisk.c
@@ -126,7 +126,7 @@
 	struct squashfs_super_block sb;
 	struct rootdev_volume *p;
 
-	if (strcmp(name, "rootfs_data") != 0)
+	if (strcmp(name, "data_vol") != 0)
 		return NULL;
 
 	if (!rootdev)
@@ -148,7 +148,7 @@
 
 	p = calloc(1, sizeof(*p));
 	p->v.drv = &rootdisk_driver;
-	p->v.name = "rootfs_data";
+	p->v.name = "data_vol";
 
 	p->offset = le64_to_cpu(sb.bytes_used);
 	p->offset = ((p->offset + (ROOTDEV_OVERLAY_ALIGN - 1)) &
@@ -268,9 +268,9 @@
 	case FS_NONE:
 		ULOG_INFO("rootdisk overlay filesystem has not been formatted yet\n");
 		if (rootdisk_use_f2fs(p))
-			snprintf(str, sizeof(str), "mkfs.f2fs -q -l rootfs_data %s", v->blk);
+			snprintf(str, sizeof(str), "mkfs.f2fs -q -l data_vol %s", v->blk);
 		else
-			snprintf(str, sizeof(str), "mkfs.ext4 -q -L rootfs_data %s", v->blk);
+			snprintf(str, sizeof(str), "mkfs.ext4 -q -L data_vol %s", v->blk);
 		ret = system(str);
 		break;
 	default:
